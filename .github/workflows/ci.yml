name: CI
on:
  push:
    branches:
      - main

jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "17.x" # Version stable de Java
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      # - run: flutter analyze
      # - run: flutter test

  build_ios:
    name: Build Flutter (iOS)
    needs: [flutter_test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/setup-java@v1
        with:
          java-version: "17.x" # Version stable de Java
          
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          
      - name: Install Flutter dependencies
        run: flutter pub get
        
      - name: Set platform version in Podfile
        run: |
          cd ios
          echo "platform :ios, '15.5'" >> Podfile
          
      - name: Generate Flutter files
        run: |
          flutter clean
          flutter pub get
          
      - name: Install CocoaPods
        run: |
          cd ios
          pod repo update
          pod install
      
      - name: Set up Firebase configuration
        env:
          GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          if [ -n "$GOOGLE_SERVICE_INFO_PLIST" ]; then
            echo "Creating GoogleService-Info.plist from secret..."
            echo $GOOGLE_SERVICE_INFO_PLIST | base64 --decode > ios/Runner/GoogleService-Info.plist
            echo "Firebase configuration created successfully"
          else
            echo "No Firebase configuration found, creating empty file"
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n</dict>\n</plist>" > ios/Runner/GoogleService-Info.plist
          fi
          
      - name: Build iOS app
        run: flutter build ios --release --no-codesign

  build_appbundle:
    name: Build Flutter (Android)
    needs: [flutter_test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Clean Flutter and Gradle Cache
        run: |
          flutter clean
          rm -rf ~/.gradle/caches/
          rm -rf android/.gradle/

      - name: Set up keystore and Firebase configuration
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: |
          # Create the keystore file from base64
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "Creating keystore file from secret..."
            echo $KEYSTORE_BASE64 | base64 --decode > android/app/upload-keystore.jks
            
            # Create key.properties file
            echo "Creating key.properties file..."
            echo "storePassword=$STORE_PASSWORD" > android/key.properties
            echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
            echo "keyAlias=$KEY_ALIAS" >> android/key.properties
            echo "storeFile=../app/upload-keystore.jks" >> android/key.properties
            
            echo "Keystore and key.properties created successfully"
          else
            echo "No keystore secret found, using debug signing"
            # Modify build.gradle to use debug signing for CI
            sed -i 's/signingConfig signingConfigs.release/signingConfig signingConfigs.debug/g' android/app/build.gradle
          fi
          
          # Create the google-services.json file from base64
          if [ -n "$GOOGLE_SERVICES_JSON" ]; then
            echo "Creating google-services.json from secret..."
            echo $GOOGLE_SERVICES_JSON | base64 --decode > android/app/google-services.json
            echo "Firebase configuration created successfully"
          else
            echo "No Firebase configuration found, creating empty file"
            echo "{}" > android/app/google-services.json
          fi
          
      - name: Build App Bundle
        run: flutter build appbundle --release --verbose

      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab
          
  deploy_to_play_store:
    name: Deploy to Google Play
    needs: [build_appbundle]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy from main branch
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          
      - name: Install Fastlane
        run: gem install fastlane

      # - name: Deploy to Google Play
      #   env:
      #     SERVICE_ACCOUNT_JSON: ${{ secrets.SERVICE_ACCOUNT_JSON }}
      #   run: |
      #     # Verify the AAB file exists
      #     ls -la build/app/outputs/bundle/release/
          
      #     # Deploy using fastlane
      #     fastlane supply \
      #       --aab build/app/outputs/bundle/release/app-release.aab \
      #       --track production \
      #       --json_key_data "$SERVICE_ACCOUNT_JSON" \
      #       --package_name fr.beehiveapp.beehive
